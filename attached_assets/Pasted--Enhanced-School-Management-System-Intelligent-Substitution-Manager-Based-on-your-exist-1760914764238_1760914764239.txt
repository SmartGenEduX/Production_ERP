/**
 * Enhanced School Management System - Intelligent Substitution Manager
 * Based on your existing system with added intelligent assignment logic
 */
function generateSubstitutionPDF() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const leaveSheet = ss.getSheetByName("LEAVE REQUESTS");
  const timetableSheet = ss.getSheetByName("MASTER TIMETABLE");
  const logSheet = ss.getSheetByName("SUBSTITUTION LOG");
  const todayDate = new Date();
  const today = Utilities.formatDate(todayDate, Session.getScriptTimeZone(), "dd-MM-yyyy");
  const dayNames = ["SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"];
  const todayDay = dayNames[todayDate.getDay()];
  if (todayDay === "SUNDAY") return;
  const leaveData = leaveSheet.getDataRange().getValues();
  const timetableData = timetableSheet.getDataRange().getValues();
  const header = leaveData[0];
  const nameIndex = header.indexOf("NAME");
  const dateIndex = header.indexOf("DATE");
  const typeIndex = header.indexOf("TYPE OF LEAVE");
  // Enhanced exclusion list - teachers with 7+ periods per day
  const excludedNames = getOverloadedTeachers(timetableData, todayDay);
  
  // Add your permanent exclusions
  excludedNames.push(...["MRS. GEETHA", "MRS. K BHAGYALAKSHMI", "MRS. SHOBA BABU M", "Mrs. SHAKTHI DEVI", "Mrs. M C HEMALATHA", "Mr. GOPALAKRISHNAN", "Mr. BOOBALAN"]);
  const seenNames = new Set();
  const leaveToday = leaveData.filter((row, i) => {
    if (i === 0) return false;
    const rowDate = Utilities.formatDate(new Date(row[dateIndex]), Session.getScriptTimeZone(), "dd-MM-yyyy");
    const name = row[nameIndex]?.toString().toUpperCase().trim();
    return rowDate === today && !seenNames.has(name) && seenNames.add(name);
  });
  if (leaveToday.length === 0) return;
  const teacherIndex = timetableData[0].indexOf("TEACHER'S NAME");
  const dayIndex = 2;
  const periods = ["PERIOD 1", "PERIOD 2", "PERIOD 3", "PERIOD 4", "PERIOD 5", "PERIOD 6", "LUNCH", "PERIOD 7", "PERIOD 8", "PERIOD 9"];
  const periodColumnOffset = {
    "PERIOD 1": 3, "PERIOD 2": 4, "PERIOD 3": 5, "PERIOD 4": 6,
    "PERIOD 5": 7, "PERIOD 6": 8, "LUNCH": 9, "PERIOD 7": 10, "PERIOD 8": 11, "PERIOD 9": 12
  };
  const leaveNamesToday = leaveToday.map(row => row[nameIndex]?.toString().toUpperCase().trim());
  const substitutionCount = {};
  const teacherClassSubject = {};
  const freeTeachers = {};
  const teacherDailyPeriods = {};
  // Enhanced teacher analysis with workload calculation
  for (const row of timetableData) {
    const teacher = row[teacherIndex]?.toString().toUpperCase().trim();
    const day = row[dayIndex]?.toString().toUpperCase().trim();
    if (!teacher || day !== todayDay) continue;
    teacherClassSubject[teacher] = teacherClassSubject[teacher] || { 
      class: new Set(), 
      subject: new Set(), 
      lastPeriod: -2,
      dailyPeriods: 0 
    };
    teacherDailyPeriods[teacher] = 0;
    for (const period of periods) {
      if (period === "LUNCH") continue;
      
      const col = periodColumnOffset[period];
      const val = row[col]?.toString().trim().toUpperCase();
      
      if (!val || val === "FREE") {
        if (!freeTeachers[period]) freeTeachers[period] = [];
        if (!excludedNames.includes(teacher) && !leaveNamesToday.includes(teacher)) {
          freeTeachers[period].push(teacher);
        }
      } else {
        teacherDailyPeriods[teacher]++;
        teacherClassSubject[teacher].dailyPeriods++;
        
        const parts = val.split(" ");
        const cls = parts[0];
        const subj = parts.slice(1).join(" ");
        
        if (cls) teacherClassSubject[teacher].class.add(cls);
        if (subj) teacherClassSubject[teacher].subject.add(subj);
      }
    }
  }
  let substitutionList = `SUBSTITUTION DUTY LIST - ${today}\n\n`;
  substitutionList += "LEAVE TEACHERS: " + leaveToday.map(r => r[nameIndex]).join(", ") + "\n\n";
  for (const period of periods) {
    let assignments = [];
    for (const row of leaveToday) {
      const name = row[nameIndex]?.toString().toUpperCase().trim();
      const leaveType = row[typeIndex]?.toString().toUpperCase().trim();
      const applicable =
        (leaveType === "FULL DAY" || leaveType === "ON-DUTY") ||
        (leaveType === "MORNING" && ["PERIOD 1", "PERIOD 2", "PERIOD 3", "PERIOD 4", "PERIOD 5"].includes(period)) ||
        (leaveType === "AFTERNOON" && ["PERIOD 6", "PERIOD 7", "PERIOD 8", "PERIOD 9", "LUNCH"].includes(period)) ||
        (leaveType === "PERMISSION M" && ["PERIOD 1", "PERIOD 2"].includes(period)) ||
        (leaveType === "PERMISSION A" && ["PERIOD 8", "PERIOD 9"].includes(period));
      if (!applicable) continue;
      let classInfo = null;
      let subjectInfo = null;
      for (const rowT of timetableData) {
        const tName = rowT[teacherIndex]?.toString().toUpperCase().trim();
        const day = rowT[dayIndex]?.toString().toUpperCase().trim();
        if (tName === name && day === todayDay) {
          const val = rowT[periodColumnOffset[period]];
          const text = val?.toString().trim().toUpperCase();
          if (text && text !== "" && text !== "FREE") {
            const parts = text.split(" ");
            classInfo = parts[0];
            subjectInfo = parts.slice(1).join(" ");
          }
          break;
        }
      }
      if (!classInfo || !subjectInfo) continue;
      let substitute = findBestSubstituteEnhanced(
        freeTeachers[period] || [], 
        classInfo, 
        subjectInfo, 
        period, 
        teacherClassSubject, 
        substitutionCount
      );
      if (substitute) {
        substitutionCount[substitute] = (substitutionCount[substitute] || 0) + 1;
        teacherClassSubject[substitute].lastPeriod = parseInt(period.replace(/[^\d]/g, "") || 0);
        
        const idx = freeTeachers[period].indexOf(substitute);
        if (idx !== -1) freeTeachers[period].splice(idx, 1);
        
        assignments.push(`${name}'s class (${classInfo} ${subjectInfo}) - ${substitute}`);
        logSheet.appendRow([today, period, name, `${classInfo} ${subjectInfo}`, substitute]);
      } else {
        assignments.push(`${name}'s class (${classInfo} ${subjectInfo}) - No Substitute Available`);
        logSheet.appendRow([today, period, name, `${classInfo} ${subjectInfo}`, "Not Available"]);
      }
    }
    substitutionList += `${period}\n`;
    substitutionList += assignments.length ? assignments.join("\n") : "No Substitution";
    substitutionList += "\n\n";
  }
  substitutionList += "\n=== SUBSTITUTION SUMMARY ===\n";
  for (const [teacher, count] of Object.entries(substitutionCount)) {
    substitutionList += `${teacher}: ${count} substitution(s)\n`;
  }
  const folderName = "Substitution Duty Reports";
  const folders = DriveApp.getFoldersByName(folderName);
  const folder = folders.hasNext() ? folders.next() : DriveApp.createFolder(folderName);
  const blob = Utilities.newBlob(substitutionList, "text/plain", `Substitution_${today}.txt`);
  folder.createFile(blob);
}
function findBestSubstituteEnhanced(availableTeachers, classInfo, subjectInfo, period, teacherClassSubject, substitutionCount) {
  if (!availableTeachers || availableTeachers.length === 0) return null;
  const periodNum = parseInt(period.replace(/[^\d]/g, "") || 0);
  const candidates = [];
  for (const teacher of availableTeachers) {
    const teacherInfo = teacherClassSubject[teacher];
    if (!teacherInfo) continue;
    const currentSubstitutions = substitutionCount[teacher] || 0;
    
    if (currentSubstitutions >= 3) continue;
    if (periodNum - teacherInfo.lastPeriod <= 1) continue;
    let score = 0;
    if (teacherInfo.subject.has(subjectInfo)) {
      score += 100;
    }
    if (teacherInfo.class.has(classInfo)) {
      score += 50;
    }
    const dailyPeriods = teacherInfo.dailyPeriods || 0;
    score += (7 - dailyPeriods) * 5;
    score -= currentSubstitutions * 15;
    const gap = periodNum - teacherInfo.lastPeriod;
    if (gap > 2) score += 10;
    candidates.push({
      teacher: teacher,
      score: score,
      currentSubs: currentSubstitutions,
      dailyPeriods: dailyPeriods
    });
  }
  candidates.sort((a, b) => b.score - a.score);
  return candidates.length > 0 ? candidates[0].teacher : null;
}
function getOverloadedTeachers(timetableData, todayDay) {
  const teacherIndex = timetableData[0].indexOf("TEACHER'S NAME");
  const dayIndex = 2;
  const overloadedTeachers = [];
  const teacherPeriodCount = {};
  for (const row of timetableData) {
    const teacher = row[teacherIndex]?.toString().toUpperCase().trim();
    const day = row[dayIndex]?.toString().toUpperCase().trim();
    
    if (!teacher || day !== todayDay) continue;
    if (!teacherPeriodCount[teacher]) {
      teacherPeriodCount[teacher] = 0;
    }
    for (let col = 3; col <= 12; col++) {
      if (col === 9) continue;
      const val = row[col]?.toString().trim().toUpperCase();
      if (val && val !== "FREE" && val !== "") {
        teacherPeriodCount[teacher]++;
      }
    }
  }
  for (const [teacher, count] of Object.entries(teacherPeriodCount)) {
    if (count >= 7) {
      overloadedTeachers.push(teacher);
    }
  }
  return overloadedTeachers;
}
function getTodaySubstitutionsData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheet = ss.getSheetByName('SUBSTITUTION LOG');
  
  if (!logSheet) return [];
  
  const data = logSheet.getDataRange().getValues();
  const today = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd-MM-yyyy");
  const todaySubstitutions = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const dateStr = row[0];
    
    if (dateStr === today) {
      todaySubstitutions.push({
        teacherName: row[2],
        period: row[1],
        classSubject: row[3],
        substitute: row[4],
        typeOfLeave: "Leave"
      });
    }
  }
  
  return todaySubstitutions;
}
/**
 * Sets up substitution-related sheets
 */
function setupSubstitutionSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Create LEAVE REQUESTS sheet
  const leaveSheet = createSheetIfNotExists('LEAVE REQUESTS', setupLeaveRequestsSheet);
  
  // Create SUBSTITUTION LOG sheet  
  const logSheet = createSheetIfNotExists('SUBSTITUTION LOG', setupSubstitutionLogSheet);
  
  SpreadsheetApp.getUi().alert('Substitution sheets created successfully!');
}
function setupLeaveRequestsSheet(sheet) {
  const headers = ['TIMESTAMP', 'EMAIL', 'NAME', 'DATE', 'TYPE OF LEAVE', 'REASON', 'STATUS', 'ACTION TAKEN'];
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
  sheet.setFrozenRows(1);
}
function setupSubstitutionLogSheet(sheet) {
  const headers = ['DATE', 'PERIOD', 'ABSENT TEACHER', 'CLASS SUBJECT', 'SUBSTITUTE'];
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
  sheet.setFrozenRows(1);
}